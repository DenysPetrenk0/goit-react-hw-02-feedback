{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/statistics/Statistics.js","components/section/Section.js","components/notification/Notification.js","components/feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","options","map","option","type","onClick","name","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","className","Notification","message","Feedback","state","event","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"qPAaeA,EARS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OAAOC,EAAQC,KAAI,SAACC,GAAD,OACjB,wBAAQC,KAAK,SAASC,QAASL,EAAiBM,KAAMH,EAAtD,SACGA,QCUQI,EAhBI,SAAC,GAIa,IAJZC,EAIW,EAJXA,KACbC,EAGwB,EAHxBA,QACAC,EAEwB,EAFxBA,IACAC,EACwB,EADxBA,MACAC,EAAwB,EAAxBA,mBACJ,OACI,qCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,mDAAsBC,EAAtB,WCFGC,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACrB,OACA,oCACE,oBAAIC,UAAU,eAAd,SAA8BF,IAC7BC,MCEQE,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,4BAAIA,KCyDGC,E,4MApDbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPV,gBAAkB,SAACqB,GACjB,IAAQf,EAASe,EAAMC,OAAfhB,KACR,EAAKiB,UAAS,SAACC,GAAD,sBACXlB,EAAOkB,EAAUlB,GAAQ,MAE5B,EAAKmB,qBACL,EAAKC,mC,EAGPD,mBAAqB,WACnB,EAAKF,UAAS,SAACC,GAAD,MAAgB,CAC5Bb,MAAOa,EAAUhB,KAAOgB,EAAUf,QAAUe,EAAUd,S,EAI1DgB,gCAAkC,WAChC,EAAKH,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,mBAAoBe,KAAKC,MAAOJ,EAAUhB,KAAOgB,EAAUb,MAAS,U,4CAIxE,WACE,MAA0DkB,KAAKT,MAAvDZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OACE,qCACE,cAAC,EAAD,CAASE,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBd,gBAAiB6B,KAAK7B,oBAEzC,cAAC,EAAD,CAASc,MAAM,aAAf,SACa,IAAVH,EACC,cAAC,EAAD,CAAcO,QAAS,sBAEvB,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA5CXkB,aCIRC,EARH,WACV,OACE,mCACE,cAAC,EAAD,O,MCANC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.4754cc29.chunk.js","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport options from \"../../data/options.json\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return options.map((option) => (\n    <button type=\"button\" onClick={onLeaveFeedback} name={option}>\n      {option}\n    </button>\n  ));\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\n\nconst Statistics = ({good,\n        neutral,\n        bad,\n        total,\n        positivePercentage}) => {\n    return (\n        <>\n            <p>Good: {good}</p>\n            <p>Neutral: {neutral}</p>\n            <p>Bad: {bad}</p>\n            <p>Total: {total}</p>\n            <p>Positive feedback:{positivePercentage}%</p>\n        </>\n    );\n}\n\nexport default Statistics;","import React from 'react';\n\nconst Section = ({title, children}) => {\n    return (\n    <section>\n      <h2 className=\"sectionTitle\">{title}</h2>\n      {children}\n    </section>\n    );\n}\n\nexport default Section;","import React from 'react';\n\nconst Notification = ({message}) => {\n    return (\n        <p>{message}</p>\n    );\n}\n\nexport default Notification;","/** @format */\n\nimport React, { Component } from \"react\";\nimport FeedbackOptions from \"../feedbackOptions/FeedbackOptions\";\nimport Statistics from \"../statistics/Statistics\";\nimport Section from \"../section/Section\";\nimport Notification from \"../notification/Notification\";\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (event) => {\n    const { name } = event.target;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback = () => {\n    this.setState((prevState) => ({\n      total: prevState.good + prevState.neutral + prevState.bad,\n    }));\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState((prevState) => ({\n      positivePercentage: Math.round((prevState.good / prevState.total) * 100),\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.state;\n    return (\n      <>\n        <Section title=\"Pleace leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title=\"Statistics\">\n          {total === 0 ? (\n            <Notification message={\"No feedback given\"} />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default Feedback;\n","import React from 'react';\nimport Feedback from './components/feedback/Feedback';\n\n\nconst App = () => {\n  return (\n    <>\n      <Feedback/>\n      </>\n  );\n}\n\nexport default App;","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}