{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.js","components/statistics/Statistics.js","components/section/Section.js","components/notification/Notification.js","components/feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","option","type","onClick","name","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","className","Notification","message","Feedback","state","event","console","log","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","options","map","Component","App","ReactDOM","render","document","getElementById"],"mappings":"8OAUeA,EARS,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,OACvC,OACI,mCACI,wBAAQC,KAAK,SAASC,QAASH,EAAiBI,KAAMH,EAAtD,SAA+DA,OCa5DI,EAhBI,SAAC,GAIa,IAJZC,EAIW,EAJXA,KACbC,EAGwB,EAHxBA,QACAC,EAEwB,EAFxBA,IACAC,EACwB,EADxBA,MACAC,EAAwB,EAAxBA,mBACJ,OACI,qCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,mDAAsBC,EAAtB,W,OCFGC,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACrB,OACA,oCACE,oBAAIC,UAAU,eAAd,SAA8BF,IAC7BC,MCEQE,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,4BAAIA,KCmDGC,E,4MA9CXC,MAAQ,CACJZ,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,G,EAGxBV,gBAAkB,SAACmB,GACfC,QAAQC,IAAIF,EAAMG,OAAOlB,MACxB,IAAQA,EAASe,EAAMG,OAAflB,KACT,EAAKmB,UAAS,SAAAC,GAAS,sBACpBpB,EAAOoB,EAAUpB,GAAQ,MAE5B,EAAKqB,qBACL,EAAKC,mC,EAGTD,mBAAqB,WACjB,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAAEf,MAAOe,EAAUlB,KAAOkB,EAAUjB,QAAUiB,EAAUhB,S,EAGxFkB,gCAAkC,WAC9B,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAAEd,mBAAoBiB,KAAKC,MAAMJ,EAAUlB,KAAOkB,EAAUf,MAAQ,U,4CAGpG,WAAU,IAAD,OACL,EAA0DoB,KAAKX,MAAvDZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OACI,qCACI,cAAC,EAAD,CAASE,MAAM,wBAAf,SACCkB,EAAQC,KAAI,SAAC9B,GAAD,OACT,cAAC,EAAD,CAAiBA,OAAQA,EAAQD,gBAAiB,EAAKA,iBAAsBC,QAGjF,cAAC,EAAD,CAASW,MAAM,aAAf,SACe,IAAVH,EACD,cAAC,EAAD,CAAcO,QAAS,sBACvB,cAAC,EAAD,CAAYV,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,a,GAvCnFsB,aCIRC,EARH,WACV,OACE,mCACE,cAAC,EAAD,O,MCFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.e0948ef1.chunk.js","sourcesContent":["import React from 'react';\n\nconst FeedbackOptions = ({onLeaveFeedback, option}) => {\n    return (\n        <>\n            <button type=\"button\" onClick={onLeaveFeedback} name={option}>{option}</button>\n        </>\n    );\n}\n\nexport default FeedbackOptions;","import React from 'react';\n\nconst Statistics = ({good,\n        neutral,\n        bad,\n        total,\n        positivePercentage}) => {\n    return (\n        <>\n            <p>Good: {good}</p>\n            <p>Neutral: {neutral}</p>\n            <p>Bad: {bad}</p>\n            <p>Total: {total}</p>\n            <p>Positive feedback:{positivePercentage}%</p>\n        </>\n    );\n}\n\nexport default Statistics;","import React from 'react';\n\nconst Section = ({title, children}) => {\n    return (\n    <section>\n      <h2 className=\"sectionTitle\">{title}</h2>\n      {children}\n    </section>\n    );\n}\n\nexport default Section;","import React from 'react';\n\nconst Notification = ({message}) => {\n    return (\n        <p>{message}</p>\n    );\n}\n\nexport default Notification;","import React, { Component } from 'react'\nimport FeedbackOptions from '../feedbackOptions/FeedbackOptions';\nimport Statistics from '../statistics/Statistics';\nimport options from '../../data/options.json'\nimport Section from '../section/Section';\nimport Notification from '../notification/Notification';\n\n\nclass Feedback extends Component {\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        positivePercentage: 0\n    }\n    \n    onLeaveFeedback = (event) => {\n        console.log(event.target.name);\n         const { name } = event.target;\n        this.setState(prevState => ({\n          [name] :prevState[name] + 1\n        }));\n        this.countTotalFeedback();\n        this.countPositiveFeedbackPercentage()\n    }\n\n    countTotalFeedback = () => {\n        this.setState(prevState => ({ total: prevState.good + prevState.neutral + prevState.bad }));\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        this.setState(prevState => ({ positivePercentage: Math.round(prevState.good / prevState.total * 100)}))\n    }\n\n    render() {\n        const { good, neutral, bad, total, positivePercentage } = this.state;\n        return (\n            <>\n                <Section title=\"Pleace leave feedback\">\n                {options.map((option) => (\n                    <FeedbackOptions option={option} onLeaveFeedback={this.onLeaveFeedback} key={option}/>\n                ))}\n                </Section>\n                <Section title=\"Statistics\">\n                    {total === 0 ?\n                    <Notification message={\"No feedback given\"}/> :\n                    <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage}/>\n    }\n                </Section>\n            </>\n        );\n    }\n}\n\nexport default Feedback;","import React from 'react';\nimport Feedback from './components/feedback/Feedback';\n\n\nconst App = () => {\n  return (\n    <>\n      <Feedback/>\n      </>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}